{"version":3,"sources":["logo.svg","../../src/index.ts","../../src/useMIDI.ts","App.js","serviceWorker.js","index.js"],"names":["module","exports","useState","WebMidi","setAccessError","console","rainbow","App","midi","useMIDI","note","setNote","octave","setOctave","output","setOutput","input","setInput","useEffect","inputs","map","addListener","e","name","className","key","src","logo","alt","style","color","value","onChange","target","inp","id","outputs","out","padding","margin","onClick","getOutputById","playNote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,8ECA3C,YAAS,qF,oLCAT,WACA,QAEa,UAAU,WAAK,MACE,aADF,SACnB,EADmB,KACX,EADW,OAEI,aAFJ,SAEnB,EAFmB,KAEV,EAFU,OAGgB,WAAS,CAAE,YAAQ,IAHnC,SAGnB,EAHmB,KAGJ,EAHI,OAIc,EAAAC,SAAS,CAAE,YAAQ,IAJjC,SAInB,EAJmB,KAIL,EAJK,OAMY,aANZ,SAMnB,EANmB,KAMN,EANM,KAuBxB,OAfAC,EAAM,QAAO,SAAC,GACV,IACIC,EAAS,GACTC,QAAE,IAAI,IAGV,EAAM,EAAQ,QAEd,EAAO,EAAQ,SAEnB,EAAiB,CAAE,OAAQ,SAAC,GAAD,OAAQ,EAAQ,cAAc,MAErD,EAAY,CAAE,OAAQ,SAAC,GAAD,OAAQ,EAAQ,aAAa,SAGlD,CACL,cAAe,EAAc,OAC7B,aAAc,EAAa,OAC3B,SACA,UACA,iB,6HC1BEC,EAAU,CACd,UACA,UACA,UACA,UACA,UACA,UACA,WA0EaC,MAxEf,WACE,IAAMC,EAAOC,oBADA,EAEWP,qBAFX,mBAENQ,EAFM,KAEAC,EAFA,OAGeT,qBAHf,mBAGNU,EAHM,KAGEC,EAHF,OAIeX,qBAJf,mBAINY,EAJM,KAIEC,EAJF,OAKab,qBALb,mBAKNc,EALM,KAKCC,EALD,KAiBb,OAVAC,qBAAU,WACRV,EAAKW,QACHX,EAAKW,OAAOC,KAAI,SAACJ,GAAD,OACdA,EAAMK,YAAY,SAAU,OAAO,SAACC,GAClCX,EAAQ,GAAD,OAAIW,EAAEZ,KAAKa,OAClBV,EAAUS,EAAEZ,KAAKE,gBAGtB,CAACJ,IAGF,yBAAKgB,UAAU,MAAMC,IAAKjB,GACxB,4BAAQgB,UAAU,cAChB,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,oEACA,wBACEC,MAAO,CACLC,MAAOxB,EAAQM,EAAS,KAGzBF,EACAE,GAEH,qCACA,4BAAQmB,MAAOf,EAAOgB,SAAU,SAACV,GAAD,OAAOL,EAASK,EAAEW,OAAOF,SACtDvB,EAAKW,QACJX,EAAKW,OAAOC,KAAI,SAACc,GAAD,OACd,4BAAQT,IAAKS,EAAIC,GAAIJ,MAAOG,EAAIC,IAC7BD,EAAIX,UAIb,sCACA,4BACEQ,MAAOjB,EACPkB,SAAU,SAACV,GACTP,EAAUO,EAAEW,OAAOF,SAGpBvB,EAAK4B,SACJ5B,EAAK4B,QAAQhB,KAAI,SAACiB,GAAD,OACf,4BAAQZ,IAAKY,EAAIF,GAAIJ,MAAOM,EAAIF,IAC7BE,EAAId,UAKb,4BACEM,MAAO,CACLS,QAAS,OACTC,OAAQ,QAEVC,QAAS,WACP1B,GACEN,EAAKiC,eACLjC,EAAKiC,cAAc3B,GAAQ4B,SAAS,QAR1C,wBCxDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.f4323e03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar useMIDI_1 = require(\"./useMIDI\");\nObject.defineProperty(exports, \"useMIDI\", { enumerable: true, get: function () { return useMIDI_1.useMIDI; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useMIDI = void 0;\nconst react_1 = require(\"react\");\nconst WebMidi = require(\"webmidi\");\nexports.useMIDI = () => {\n    const [inputs, setInputs] = react_1.useState();\n    const [outputs, setOutputs] = react_1.useState();\n    const [getOutputById, setGetOutputById] = react_1.useState({ getter: undefined });\n    const [getInputById, setGetInputById] = react_1.useState({ getter: undefined });\n    const [accessError, setAccessError] = react_1.useState();\n    WebMidi.enable((err) => {\n        if (err) {\n            setAccessError(err);\n            console.log(err);\n        }\n        setInputs(WebMidi.inputs);\n        setOutputs(WebMidi.outputs);\n        setGetOutputById({ getter: (id) => WebMidi.getOutputById(id) });\n        setGetInputById({ getter: (id) => WebMidi.getInputById(id) });\n    });\n    return {\n        getOutputById: getOutputById.getter,\n        getInputById: getInputById.getter,\n        inputs,\n        outputs,\n        accessError,\n    };\n};\n//# sourceMappingURL=useMIDI.js.map","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useMIDI } from \"react-use-midi/lib\";\n\nconst rainbow = [\n  \"#9400D3\",\n  \"#4B0082\",\n  \"#0000FF\",\n  \"#00FF00\",\n  \"#FFFF00\",\n  \"#FF7F00\",\n  \"#FF0000\",\n];\nfunction App() {\n  const midi = useMIDI();\n  const [note, setNote] = useState();\n  const [octave, setOctave] = useState();\n  const [output, setOutput] = useState();\n  const [input, setInput] = useState();\n\n  useEffect(() => {\n    midi.inputs &&\n      midi.inputs.map((input) =>\n        input.addListener(\"noteon\", \"all\", (e) => {\n          setNote(`${e.note.name}`);\n          setOctave(e.note.octave);\n        })\n      );\n  }, [midi]);\n\n  return (\n    <div className=\"App\" key={midi}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Learn MIDI. Plug in a MIDI Keyboard.</h1>\n        <h1\n          style={{\n            color: rainbow[octave + 1],\n          }}\n        >\n          {note}\n          {octave}\n        </h1>\n        <h2>Input</h2>\n        <select value={input} onChange={(e) => setInput(e.target.value)}>\n          {midi.inputs &&\n            midi.inputs.map((inp) => (\n              <option key={inp.id} value={inp.id}>\n                {inp.name}\n              </option>\n            ))}\n        </select>\n        <h2>Output</h2>\n        <select\n          value={output}\n          onChange={(e) => {\n            setOutput(e.target.value);\n          }}\n        >\n          {midi.outputs &&\n            midi.outputs.map((out) => (\n              <option key={out.id} value={out.id}>\n                {out.name}\n              </option>\n            ))}\n        </select>\n\n        <button\n          style={{\n            padding: \"20px\",\n            margin: \"20px\",\n          }}\n          onClick={() => {\n            output &&\n              midi.getOutputById &&\n              midi.getOutputById(output).playNote(\"C3\");\n          }}\n        >\n          Play C3 to output\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}